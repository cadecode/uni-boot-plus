<?xml version="1.0" encoding="utf-8" ?>
<!--参考自默认配置，位于 spring-boot 包 org/springframework/boot/logging/logback/defaults.xml-->
<!--configuration
    scan 是否定时扫描配置文件变化
    scanPeriod 定时间隔
    debug 是否开启日志系统内部 debug
-->
<configuration scan="true" scanPeriod="60 seconds" debug="false">

    <!--配置参数常量-->
    <!--级别：trace<debug<info<warn<error 增加，通常仅需要 debug/info/error-->
    <property name="LEVEL" value="DEBUG"/>

    <!--文件保留时间-->
    <property name="HISTORY" value="30"/>

    <!--文件编码-->
    <property name="CHARSET" value="UTF-8"/>

    <!--文件存放位置，直接指定-->
    <!--<property name="FILE_PATH" value="./logs" />-->

    <!--文件存放位置-->
    <!--从 SpringBoot 配置文件中获取（注意文件名需要为 logback-spring.xml）
        SpringBoot 默认将 logging 路径配置加入环境变量 LOG_PATH
    -->
    <property name="FILE_PATH" value="${LOG_PATH:-${LOG_TEMP:-${java.io.tmpdir:-/tmp}}}"/>

    <!--SpringBoot 默认风格色彩-->
    <conversionRule conversionWord="applicationName"
                    converterClass="org.springframework.boot.logging.logback.ApplicationNameConverter"/>
    <conversionRule conversionWord="clr" converterClass="org.springframework.boot.logging.logback.ColorConverter"/>
    <conversionRule conversionWord="correlationId"
                    converterClass="org.springframework.boot.logging.logback.CorrelationIdConverter"/>
    <conversionRule conversionWord="wex"
                    converterClass="org.springframework.boot.logging.logback.WhitespaceThrowableProxyConverter"/>
    <conversionRule conversionWord="wEx"
                    converterClass="org.springframework.boot.logging.logback.ExtendedWhitespaceThrowableProxyConverter"/>

    <!--控制台输出格式-->
    <property name="CONSOLE_PATTERN"
              value="${CONSOLE_LOG_PATTERN:-%clr(%d{${LOG_DATEFORMAT_PATTERN:-yyyy-MM-dd'T'HH:mm:ss.SSSXXX}}){faint} %clr(${LOG_LEVEL_PATTERN:-%5p}) %clr(${PID:- }){magenta} %clr(---){faint} %clr(%applicationName[%15.15t]){faint} %clr(${LOG_CORRELATION_PATTERN:-}){faint}%clr(%-40.40logger{39}){cyan} %clr(:){faint} %m%n${LOG_EXCEPTION_CONVERSION_WORD:-%wEx}}"/>

    <!--文件输出格式-->
    <property name="FILE_PATTERN"
              value="${FILE_LOG_PATTERN:-%d{${LOG_DATEFORMAT_PATTERN:-yyyy-MM-dd'T'HH:mm:ss.SSSXXX}} ${LOG_LEVEL_PATTERN:-%5p} ${PID:- } --- %applicationName[%t] ${LOG_CORRELATION_PATTERN:-}%-40.40logger{39} : %m%n${LOG_EXCEPTION_CONVERSION_WORD:-%wEx}}"/>


    <!--控制台输出日志-->
    <appender name="CONSOLE_APPENDER" class="ch.qos.logback.core.ConsoleAppender">
        <!--格式-->
        <encoder>
            <pattern>${CONSOLE_PATTERN}</pattern>
            <charset>${CHARSET}</charset>
        </encoder>
    </appender>

    <!--debug 文件日志-->
    <appender name="DEBUG_APPENDER" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <!--正在记录的日志文件位置-->
        <file>${FILE_PATH}/debug.now.log</file>
        <!--日志记录器的滚动策略-->
        <rollingPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedRollingPolicy">
            <!--按日期命名, %i 表示索引-->
            <fileNamePattern>${FILE_PATH}/debug/debug.%d{yyyy-MM-dd}.%i.log</fileNamePattern>
            <!--保留 30 天-->
            <maxHistory>${HISTORY}</maxHistory>
            <!--文件大小超过 10MB，则输出的新文件，索引增加-->
            <maxFileSize>10MB</maxFileSize>
        </rollingPolicy>
        <!--格式-->
        <encoder>
            <pattern>${FILE_PATTERN}</pattern>
            <charset>${CHARSET}</charset>
        </encoder>
        <!--只记录 debug-->
        <filter class="ch.qos.logback.classic.filter.LevelFilter">
            <level>DEBUG</level>
            <onMatch>ACCEPT</onMatch>
            <onMismatch>DENY</onMismatch>
        </filter>
    </appender>

    <!--info 文件日志-->
    <appender name="INFO_APPENDER" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <file>${FILE_PATH}/info.now.log</file>
        <rollingPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedRollingPolicy">
            <fileNamePattern>${FILE_PATH}/info/info.%d{yyyy-MM-dd}.%i.log</fileNamePattern>
            <maxHistory>${HISTORY}</maxHistory>
            <maxFileSize>10MB</maxFileSize>
        </rollingPolicy>
        <encoder>
            <pattern>${FILE_PATTERN}</pattern>
            <charset>${CHARSET}</charset>
        </encoder>
        <filter class="ch.qos.logback.classic.filter.LevelFilter">
            <level>INFO</level>
            <onMatch>ACCEPT</onMatch>
            <onMismatch>DENY</onMismatch>
        </filter>
    </appender>

    <!--warn 文件日志-->
    <appender name="WARN_APPENDER" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <file>${FILE_PATH}/warn.now.log</file>
        <rollingPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedRollingPolicy">
            <fileNamePattern>${FILE_PATH}/warn/warn.%d{yyyy-MM-dd}.%i.log</fileNamePattern>
            <maxHistory>${HISTORY}</maxHistory>
            <maxFileSize>10MB</maxFileSize>
        </rollingPolicy>
        <encoder>
            <pattern>${FILE_PATTERN}</pattern>
            <charset>${CHARSET}</charset>
        </encoder>
        <filter class="ch.qos.logback.classic.filter.LevelFilter">
            <level>WARN</level>
            <onMatch>ACCEPT</onMatch>
            <onMismatch>DENY</onMismatch>
        </filter>
    </appender>

    <!--error 文件日志-->
    <appender name="ERROR_APPENDER" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <file>${FILE_PATH}/error.now.log</file>
        <rollingPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedRollingPolicy">
            <fileNamePattern>${FILE_PATH}/error/error.%d{yyyy-MM-dd}.%i.log</fileNamePattern>
            <maxHistory>${HISTORY}</maxHistory>
            <maxFileSize>10MB</maxFileSize>
        </rollingPolicy>
        <encoder>
            <pattern>${FILE_PATTERN}</pattern>
            <charset>${CHARSET}</charset>
        </encoder>
        <filter class="ch.qos.logback.classic.filter.LevelFilter">
            <level>ERROR</level>
            <onMatch>ACCEPT</onMatch>
            <onMismatch>DENY</onMismatch>
        </filter>
    </appender>

    <!--定义 logger
        name 指定要输出日志的包
        level 指定等级
        additivity 指定是否将 root 的 appender 加入到 logger 中，默认为 true
    -->
    <logger name="com.github.cadecode" level="${LEVEL}"/>

    <!-- SpringFramework 日志-->
    <logger name="org.springframework" level="WARN"/>
    <logger name="org.apache.catalina.startup.DigesterFactory" level="ERROR"/>
    <logger name="org.apache.catalina.util.LifecycleBase" level="ERROR"/>
    <logger name="org.apache.coyote.http11.Http11NioProtocol" level="WARN"/>
    <logger name="org.apache.sshd.common.util.SecurityUtils" level="WARN"/>
    <logger name="org.apache.tomcat.util.net.NioSelectorPool" level="WARN"/>
    <logger name="org.eclipse.jetty.util.component.AbstractLifeCycle" level="ERROR"/>
    <logger name="org.hibernate.validator.internal.util.Version" level="WARN"/>
    <logger name="org.springframework.boot.actuate.endpoint.jmx" level="WARN"/>

    <!-- mybatis 日志 -->
    <!-- mybatis 打印 sql
         SpringBoot 中只要配置 dao 或 mapper 包即可打印 sql
		 普通 SSM 项目可能需要以下配置
	-->
    <logger name="org.apache.ibatis" level="DEBUG"/>
    <logger name="java.sql" level="DEBUG"/>

    <!--根 logger
        没有定义 logger 的包，使用此 logger
    -->
    <root level="INFO">
        <appender-ref ref="CONSOLE_APPENDER"/>
        <appender-ref ref="DEBUG_APPENDER"/>
        <appender-ref ref="INFO_APPENDER"/>
        <appender-ref ref="WARN_APPENDER"/>
        <appender-ref ref="ERROR_APPENDER"/>
    </root>
</configuration>
